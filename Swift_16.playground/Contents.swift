//1. –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø –ö–æ–º–Ω–∞—Ç–∞. –£ –∫–æ–º–Ω–∞—Ç—ã –µ—Å—Ç—å —Ä–∞–∑–º–µ—Ä—ã W –Ω–∞ H. –ò —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø –ü–µ—Ä—Å–æ–Ω–∞–∂. –£ –Ω–µ–≥–æ–µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ X –∏ Y. –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∫—Ä–∞—Å–∏–≤–µ–Ω—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
//2. –ü–µ—Ä—Å–æ–Ω–∞–∂—É –¥–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –∏–¥—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç–Ω—É–º—á–∏–∫ –ª–µ–≤–æ, –ø—Ä–∞–≤–æ, –≤–µ—Ä—Ö, –≤–Ω–∏–∑
//–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–≤–∏–≥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ —á—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∏–Ω—É—Ç—å –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–¥–≤–∏–≥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –ø–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏
//3. –°–æ–∑–¥–∞—Ç—å —Ç–∏–ø –Ø—â–∏–∫. –£ —è—â–∏–∫–∞ —Ç–∞–∫–∂–µ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ X –∏ Y. –Ø—â–∏–∫ —Ç–∞–∫–∂–µ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–¥–∞—Ç—å –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã –∏ —è—â–∏–∫ —Ç–∞–∫–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—Å–ø–µ—á–∞—Ç–∞–Ω –≤–º–µ—Å—Ç–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—á–∞—Ç–∏.
//4. –¢–µ–ø–µ—Ä—å —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ, –ø–µ—Ä—Å–æ–Ω–∞–∂ –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å —è—â–∏–∫, –µ—Å–ª–∏ –æ–Ω —Å—Ç–æ–∏—Ç –Ω–∞ —Ç–æ–º –º–µ—Å—Ç–µ, –∫—É–¥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂ —Ö–æ—á–µ—Ç –ø–æ–ø–∞—Å—Ç—å. –ì–ª–∞–≤–Ω–æ–µ —á—Ç–æ –Ω–∏ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–¥–≤–∏–≥–∞–π—Ç–µ —è—â–∏–∫ :)
//5. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ—á–∫—É –≤ –∫–æ–º–Ω–∞—Ç–µ, –∫—É–¥–∞ –Ω–∞–¥–æ —è—â–∏–∫ –ø–µ—Ä–µ–¥–≤–∏–Ω—É—Ç—å –∏ –¥–≤–∏–≥–∞–π—Ç–µ :)

import Foundation

class Subject {
    
    var X : Int {
        didSet {
            if X <= 0 {
                X = oldValue
            }
        }
    }
    var Y : Int {
        didSet {
            if Y <= 0 {
                Y = oldValue
            }
        }
    }
    
    init(X:Int, Y:Int) {
        self.X = X
        if self.X <= 0 {
            self.X = 1
        }
        self.Y = Y
        if self.Y <= 0 {
            self.Y = 1
        }
    }
    
}

class Room {
    
    var width : Int {
        didSet {
            if width <= 0 {
                width = oldValue
            }
        }
    }
    
    var height : Int {
        didSet {
            if height <= 0 {
                height = oldValue
            }
        }
    }

    var person : Subject
    var box : Subject
    var goal : Subject
    
    enum Direction {
        case Top
        case Bottom
        case Left
        case Right
    }

    init(width:Int, height:Int, person:Subject, box: Subject, goal: Subject) {
        self.width = width < 0 ? 0 : width
        self.height = height < 0 ? 0 : height
        self.person = person
        if self.person.X > width {
            self.person.X = width
        }
        if self.person.Y > height {
            self.person.Y = height
        }
        self.box = box
        if self.box.X > width {
            self.box.X = width
        }
        if self.box.Y > height {
            self.box.Y = height
        }
        self.goal = goal
        if self.goal.X > width {
            self.goal.X = width
        }
        if self.goal.Y > height {
            self.goal.Y = height
        }
    }
    
    func showRoom() {
        
        var currentString = String()

        for w in 1...width {
            currentString = ""
            for h in 1...height {
                
                if person.X == h && person.Y == w {
                    currentString += "ü§æ‚Äç‚ôÇÔ∏è"
                } else if box.X == h && box.Y == w {
                    currentString += "‚öΩÔ∏è"
                } else if goal.X == h && goal.Y == w {
                    currentString += "ü•Ö"
                } else {
                    currentString += "‚¨úÔ∏è"
                }
            }
            print(currentString)
        }
    }
    
    func movePerson(inDirection: Direction) {
        
        let prevPosPerson = Subject(X: person.X, Y: person.Y)
        
        switch inDirection {
        case .Top:
            person.Y -= 1
        case .Bottom:
            if person.Y < height {
                person.Y += 1
            }
        case .Left:
            person.X -= 1
        case .Right:
            if person.X < width {
                person.X += 1
            }
        }
        
        if person.X == box.X && person.Y == box.Y {
            
            let isMove = moveBox(inDirection: inDirection)
            if !isMove {
                person = prevPosPerson
            }
        }
    }
    
    func moveBox(inDirection: Direction) -> Bool {
        
        let prevPosBox = Subject(X: box.X, Y: box.Y)
        switch inDirection {
        case .Top:
            box.Y -= 1
        case .Bottom:
            if box.Y < height {
                box.Y += 1
            }
        case .Left:
            box.X -= 1
        case .Right:
            if box.X < width {
                box.X += 1
            }
        }
        
        if goal.X == box.X && goal.Y == box.Y {
            goal = Subject(X: Int(arc4random_uniform(9) + 1), Y: Int(arc4random_uniform(9) + 1))
        }
        if prevPosBox.X == box.X && prevPosBox.Y == box.Y {
            return false
        }
        return true
    }
    
}
var myRoom = Room(width: 10, height: 10, person: Subject(X:5, Y:5), box: Subject(X: 3, Y: 3), goal: Subject(X: 3, Y: 2))

myRoom.showRoom()
myRoom.movePerson(inDirection: .Left)
print("")
myRoom.showRoom()
myRoom.movePerson(inDirection: .Left)
print("")
myRoom.showRoom()
myRoom.movePerson(inDirection: .Top)
print("")
myRoom.showRoom()
myRoom.movePerson(inDirection: .Top)
print("")
myRoom.showRoom()



